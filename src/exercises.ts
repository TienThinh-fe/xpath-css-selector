import type { Exercise } from './types'
import {
  Exercise1,
  Exercise2,
  Exercise3,
  Exercise4,
  Exercise5,
} from './components/exercises/BasicExercises'
import {
  Exercise6,
  Exercise7,
  Exercise8,
  Exercise9,
  Exercise10,
} from './components/exercises/IntermediateExercises'
import {
  Exercise11,
  Exercise12,
  Exercise13,
  Exercise14,
  Exercise15,
  Exercise16,
  Exercise17,
  Exercise18,
  Exercise19,
  Exercise20,
} from './components/exercises/AdvancedExercises'

export const exercises: Exercise[] = [
  {
    id: 1,
    title: 'Basic Button Selection',
    description: 'Find the submit button in this simple login form.',
    difficulty: 'easy',
    targetElement: 'The main action button in the form',
    hints: [
      'Look for a button element',
      'CSS: Use tag name selector "button"',
      'XPath: Use "//button" to find any button',
      "Advanced: CSS button:contains('Sign In') or XPath //button[text()='Sign In']",
    ],
    validSelectors: [
      'button',
      '//button',
      "//button[text()='Sign In']",
      "button:contains('Sign In')",
    ],
    component: Exercise1,
  },
  {
    id: 2,
    title: 'Active Navigation Link',
    description: 'Select the currently active navigation link.',
    difficulty: 'easy',
    targetElement: "The navigation link that has the 'active' class",
    hints: [
      'Look for an element with a specific class',
      'CSS: Use class selector ".active"',
      'XPath: Use "//*[@class=\'nav-link active\']" or "//*[contains(@class, \'active\')]"',
      'The active link is visually different from others',
    ],
    validSelectors: [
      '.active',
      'a.active',
      '.nav-link.active',
      "//a[@class='nav-link active']",
      "//*[contains(@class, 'active')]",
    ],
    component: Exercise2,
  },
  {
    id: 3,
    title: 'Save Profile Button',
    description: 'Find the button that saves the user profile.',
    difficulty: 'easy',
    targetElement: "The button with ID 'save-profile'",
    hints: [
      'Look for an element with a unique identifier',
      'CSS: Use ID selector "#save-profile"',
      'XPath: Use "//*[@id=\'save-profile\']"',
      'IDs are unique on a page - most specific selector',
    ],
    validSelectors: [
      '#save-profile',
      'button#save-profile',
      "//button[@id='save-profile']",
      "//*[@id='save-profile']",
    ],
    component: Exercise3,
  },
  {
    id: 4,
    title: 'Required Fields in Contact Form',
    description:
      'Find all required input fields specifically within the contact form (not the newsletter form).',
    difficulty: 'easy',
    targetElement: 'Required input elements inside the contact form',
    hints: [
      'Start by targeting the contact form with ID first',
      'CSS: Use "#contact-form input[required]" to target form then required inputs',
      'XPath: Use "//form[@id=\'contact-form\']//input[@required]" (form then descendants)',
      'Descendant selectors help scope to specific containers',
    ],
    validSelectors: [
      '#contact-form input[required]',
      '#contact-form [required]',
      'form#contact-form input[required]',
      "//form[@id='contact-form']//input[@required]",
      "//*[@id='contact-form']//input[@required]",
      "//form[@id='contact-form']//*[@required]",
    ],
    component: Exercise4,
  },
  {
    id: 5,
    title: 'Out of Stock Button',
    description: "Find the button that shows 'Out of Stock'.",
    difficulty: 'easy',
    targetElement: "The button containing the text 'Out of Stock'",
    hints: [
      'Look for text content within an element',
      'CSS: Use "button:contains(\'Out of Stock\')" for text matching',
      'XPath: Use "//button[text()=\'Out of Stock\']" or "//button[contains(text(), \'Out of Stock\')]"',
      'Text-based selectors are powerful for finding elements by content',
    ],
    validSelectors: [
      "//button[text()='Out of Stock']",
      "//button[contains(text(), 'Out of Stock')]",
      "button:contains('Out of Stock')",
    ],
    component: Exercise5,
  },
  {
    id: 6,
    title: 'Second Table Row',
    description: 'Select the second row in the data table.',
    difficulty: 'medium',
    targetElement: 'The second data row (not including header)',
    hints: [
      'Use positional selectors to target specific rows',
      'CSS: Use "tr:nth-child(3)" (3rd because header is 1st)',
      'XPath: Use "//tr[2]" for second row or "//tbody/tr[1]" if tbody exists',
      'Remember to account for the header row in counting',
      'CSS has nth-child selector',
    ],
    validSelectors: [
      'tbody tr:nth-child(2)',
      'tbody tr:nth-of-type(2)',
      '//tbody/tr[2]',
      '//tr[position()=2 and parent::tbody]',
    ],
    component: Exercise6,
  },
  {
    id: 7,
    title: 'Notification Checkboxes',
    description:
      "Find all checkboxes within the 'Notifications' settings section.",
    difficulty: 'medium',
    targetElement: 'Checkboxes inside the first settings section',
    hints: [
      'Use descendant selectors to target nested elements',
      'CSS: Use ".settings-section:first-child input[type=\'checkbox\']"',
      "XPath: Use \"//div[@class='settings-section'][1]//input[@type='checkbox']\"",
      'Combine parent selector with descendant input selector',
    ],
    validSelectors: [
      ".settings-section:first-child input[type='checkbox']",
      ".settings-section:nth-child(1) input[type='checkbox']",
      "//div[@class='settings-section'][1]//input[@type='checkbox']",
      "//h4[text()='Notifications']/following-sibling::div//input[@type='checkbox']",
    ],
    component: Exercise7,
  },
  {
    id: 8,
    title: 'Document Files',
    description:
      'Select all files that are documents (not images or spreadsheets).',
    difficulty: 'medium',
    targetElement: "File elements with data-type='document'",
    hints: [
      'Look for elements with specific attribute values',
      'CSS: Use "[data-type=\'document\']" for attribute value matching',
      'XPath: Use "//*[@data-type=\'document\']" or "//span[@data-type=\'document\']"',
      'Data attributes are commonly used for categorization',
    ],
    validSelectors: [
      "[data-type='document']",
      ".file-name[data-type='document']",
      "//span[@data-type='document']",
      "//*[@data-type='document']",
    ],
    component: Exercise8,
  },
  {
    id: 9,
    title: 'Active Success Status',
    description: 'Find the status card that is both successful and active.',
    difficulty: 'medium',
    targetElement:
      "The status indicator with both 'success' and 'active' classes",
    hints: [
      'Look for elements with multiple classes',
      'CSS: Use ".success.active" (no space between class selectors)',
      "XPath: Use \"//*[contains(@class, 'success') and contains(@class, 'active')]\"",
      'Multiple class matching requires AND logic',
    ],
    validSelectors: [
      '.status-indicator.success.active',
      '.success.active',
      "//div[@class='status-indicator success active']",
      "//*[contains(@class, 'success') and contains(@class, 'active')]",
    ],
    component: Exercise9,
  },
  {
    id: 10,
    title: 'Visible Error Messages',
    description:
      'Select error messages that are currently visible (not hidden).',
    difficulty: 'medium',
    targetElement: "Error message elements without the 'hidden' class",
    hints: [
      'Look for elements that exclude specific classes',
      'CSS: Use ".error-message:not(.hidden)" for negation',
      "XPath: Use \"//div[contains(@class, 'error-message') and not(contains(@class, 'hidden'))]\"",
      'Negation selectors help exclude unwanted elements',
    ],
    validSelectors: [
      '.error-message:not(.hidden)',
      'div.error-message:not(.hidden)',
      "//div[@class='error-message text-red-600 text-sm mt-1' and not(contains(@class, 'hidden'))]",
      "//div[contains(@class, 'error-message') and not(contains(@class, 'hidden'))]",
    ],
    component: Exercise10,
  },
  {
    id: 11,
    title: 'High Priority News',
    description:
      'Find news items with high priority that are in loaded content.',
    difficulty: 'hard',
    targetElement: "News items with data-priority='high' inside loaded content",
    hints: [
      'Look for nested conditions with multiple attributes',
      "CSS: Use \"[data-loaded='true'] .news-item[data-priority='high']\"",
      "XPath: Use \"//div[@data-loaded='true']//div[@data-priority='high']\"",
      'Combine ancestor conditions with descendant attribute matching',
    ],
    validSelectors: [
      "[data-loaded='true'] .news-item[data-priority='high']",
      ".content-section[data-loaded='true'] [data-priority='high']",
      "//div[@data-loaded='true']//div[@data-priority='high']",
      "//div[@class='content-section' and @data-loaded='true']//div[@class='news-item' and @data-priority='high']",
    ],
    component: Exercise11,
  },
  {
    id: 12,
    title: 'Plus Quantity Buttons',
    description:
      'Select all the plus (+) buttons for increasing item quantities.',
    difficulty: 'hard',
    targetElement: "Buttons with class 'plus' inside quantity controls",
    hints: [
      'Look for buttons with specific class and context',
      'CSS: Use ".quantity-btn.plus" or "button.plus"',
      'XPath: Use "//button[contains(@class, \'plus\')]" or "//button[text()=\'+\']"',
      'Can target by class or by text content (+)',
    ],
    validSelectors: [
      '.quantity-btn.plus',
      'button.plus',
      "//button[@class='quantity-btn plus']",
      "//button[contains(@class, 'plus')]",
      "//button[text()='+']",
    ],
    component: Exercise12,
  },
  {
    id: 13,
    title: 'Modal Close Button',
    description: 'Find the close button inside the modal dialog.',
    difficulty: 'hard',
    targetElement: 'The close button within the modal content',
    hints: [
      'Look inside modal-specific containers',
      'CSS: Use ".modal-content .modal-close"',
      "XPath: Use \"//div[@class='modal-content']//button[@class='modal-close']\"",
      'Use descendant selectors to scope within modal structure',
    ],
    validSelectors: [
      '.modal-content .modal-close',
      '.modal-header .modal-close',
      "//div[@class='modal-content']//button[@class='modal-close text-gray-500 hover:text-gray-700']",
      "//div[contains(@class, 'modal-header')]//button[contains(@class, 'modal-close')]",
    ],
    component: Exercise13,
  },
  {
    id: 14,
    title: 'Current Step Number',
    description: 'Find the step number of the currently active step.',
    difficulty: 'hard',
    targetElement: 'The step number inside the active step',
    hints: [
      'Look for the active step first, then find number within it',
      'CSS: Use ".step.active .step-number" (active step then descendant number)',
      "XPath: Use \"//div[contains(@class, 'active')]/div[contains(@class, 'step-number')]\"",
      'Chain selectors: parent condition + descendant target',
    ],
    validSelectors: [
      '.step.active .step-number',
      '.active .step-number',
      "//div[@class='step active']//div[@class='step-number bg-blue-600 text-white rounded-full w-8 h-8 flex items-center justify-center']",
      "//div[contains(@class, 'active')]/div[contains(@class, 'step-number')]",
    ],
    component: Exercise14,
  },
  {
    id: 15,
    title: 'Admin Role Badge',
    description: 'Select the role badge for admin users in the table.',
    difficulty: 'hard',
    targetElement: "Role badge elements that contain 'Admin' text",
    hints: [
      'Look for role badges with specific text content',
      'CSS: Use ".role-badge:contains(\'Admin\')" for text matching',
      "XPath: Use \"//span[contains(@class, 'role-badge') and text()='Admin']\"",
      'Combine class selector with text content matching',
    ],
    validSelectors: [
      '.role-badge.admin',
      "//span[@class='role-badge admin bg-purple-100 text-purple-800 px-2 py-1 rounded']",
      "//span[contains(@class, 'role-badge') and contains(@class, 'admin')]",
      "//span[contains(@class, 'role-badge') and text()='Admin']",
    ],
    component: Exercise15,
  },
  {
    id: 16,
    title: 'Featured Submenu Link',
    description: "Find the 'Featured' link in the Products submenu.",
    difficulty: 'hard',
    targetElement: 'The featured submenu link within the products section',
    hints: [
      'Navigate through nested menu structure',
      'CSS: Use ".has-submenu .submenu .featured" (parent → submenu → link)',
      "XPath: Use \"//li[contains(@class, 'has-submenu')]//a[contains(@class, 'featured')]\"",
      'Chain multiple descendant relationships for deep nesting',
    ],
    validSelectors: [
      '.submenu .submenu-link.featured',
      '.has-submenu .submenu .featured',
      "//li[contains(@class, 'has-submenu')]//a[contains(@class, 'featured')]",
      "//ul[@class='submenu bg-gray-50']//a[text()='Featured']",
    ],
    component: Exercise16,
  },
  {
    id: 17,
    title: "Today's Date",
    description: 'Select the calendar cell that represents today.',
    difficulty: 'hard',
    targetElement: "The calendar day cell with the 'today' class",
    hints: [
      'Look for calendar cell with special today styling',
      'CSS: Use ".today" or "td.today" for today\'s date',
      'XPath: Use "//td[contains(@class, \'today\')]" or "//*[@class=\'today\']"',
      "Today's date has distinctive visual styling",
    ],
    validSelectors: [
      '.day.today',
      '.today',
      "//div[@class='day current-month today bg-blue-600 text-white p-2 rounded cursor-pointer']",
      "//div[contains(@class, 'today')]",
    ],
    component: Exercise17,
  },
  {
    id: 18,
    title: 'Bold Formatting Button',
    description: 'Find the bold formatting button in the text editor toolbar.',
    difficulty: 'hard',
    targetElement: "The bold tool button with data-command='bold'",
    hints: [
      'Look for button with specific data attribute',
      'CSS: Use "[data-command=\'bold\']" or ".tool-btn[data-command=\'bold\']"',
      'XPath: Use "//button[@data-command=\'bold\']"',
      'Data attributes provide semantic information about button function',
    ],
    validSelectors: [
      '.tool-btn.bold',
      "[data-command='bold']",
      ".tool-btn[data-command='bold']",
      "//button[@data-command='bold']",
      "//button[contains(@class, 'bold')]",
    ],
    component: Exercise18,
  },
  {
    id: 19,
    title: 'Completed List Items',
    description: 'Select all list items that have a completed status.',
    difficulty: 'hard',
    targetElement: "List items with data-status='completed'",
    hints: [
      'Look for items with specific status attribute',
      'CSS: Use "[data-status=\'completed\']" or "li[data-status=\'completed\']"',
      'XPath: Use "//li[@data-status=\'completed\']"',
      'Status attributes help identify item states',
    ],
    validSelectors: [
      ".list-item[data-status='completed']",
      "[data-status='completed']",
      "//div[@data-status='completed']",
      "//div[@class='list-item flex items-center justify-between p-3 border rounded' and @data-status='completed']",
    ],
    component: Exercise19,
  },
  {
    id: 20,
    title: 'Recent Activity Icons',
    description: "Find all activity icons in the dashboard's activity widget.",
    difficulty: 'hard',
    targetElement: 'Activity icons within the activity widget',
    hints: [
      'Look inside the activity widget specifically',
      'CSS: Use ".activity-widget .activity-icon" (widget then descendant icons)',
      "XPath: Use \"//div[contains(@class, 'activity-widget')]//div[contains(@class, 'activity-icon')]\"",
      'Widget structure requires descendant navigation for scoped selection',
    ],
    validSelectors: [
      '.activity-widget .activity-icon',
      '.widget.activity-widget .activity-icon',
      "//div[contains(@class, 'activity-widget')]//div[contains(@class, 'activity-icon')]",
      "//div[@class='widget activity-widget bg-white border rounded-lg p-4 shadow-sm']//div[contains(@class, 'activity-icon')]",
    ],
    component: Exercise20,
  },
]
